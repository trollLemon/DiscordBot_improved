// Code generated by MockGen. DO NOT EDIT.
// Source: database_service.go
//
// Generated by this command:
//
//	mockgen --source=database_service.go --destination=./Mocks/mock_database_service.go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseService is a mock of DatabaseService interface.
type MockDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseServiceMockRecorder
}

// MockDatabaseServiceMockRecorder is the mock recorder for MockDatabaseService.
type MockDatabaseServiceMockRecorder struct {
	mock *MockDatabaseService
}

// NewMockDatabaseService creates a new mock instance.
func NewMockDatabaseService(ctrl *gomock.Controller) *MockDatabaseService {
	mock := &MockDatabaseService{ctrl: ctrl}
	mock.recorder = &MockDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseService) EXPECT() *MockDatabaseServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDatabaseService) Delete(item string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseServiceMockRecorder) Delete(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabaseService)(nil).Delete), item)
}

// FetchRandom mocks base method.
func (m *MockDatabaseService) FetchRandom(n int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRandom", n)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRandom indicates an expected call of FetchRandom.
func (mr *MockDatabaseServiceMockRecorder) FetchRandom(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRandom", reflect.TypeOf((*MockDatabaseService)(nil).FetchRandom), n)
}

// GetAll mocks base method.
func (m *MockDatabaseService) GetAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDatabaseServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDatabaseService)(nil).GetAll))
}

// Insert mocks base method.
func (m *MockDatabaseService) Insert(item string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseServiceMockRecorder) Insert(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabaseService)(nil).Insert), item)
}

// IsPresent mocks base method.
func (m *MockDatabaseService) IsPresent(item string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", item)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPresent indicates an expected call of IsPresent.
func (mr *MockDatabaseServiceMockRecorder) IsPresent(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockDatabaseService)(nil).IsPresent), item)
}
