// Code generated by MockGen. DO NOT EDIT.
// Source: imageFromHTTP.go
//
// Generated by this command:
//
//	mockgen --source=imageFromHTTP.go --destination=./Mocks/mockImageFromHTTP.go
//

// Package mock_Interfaces is a generated GoMock package.
package mock_Interfaces

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageFromHTTP is a mock of ImageFromHTTP interface.
type MockImageFromHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockImageFromHTTPMockRecorder
}

// MockImageFromHTTPMockRecorder is the mock recorder for MockImageFromHTTP.
type MockImageFromHTTPMockRecorder struct {
	mock *MockImageFromHTTP
}

// NewMockImageFromHTTP creates a new mock instance.
func NewMockImageFromHTTP(ctrl *gomock.Controller) *MockImageFromHTTP {
	mock := &MockImageFromHTTP{ctrl: ctrl}
	mock.recorder = &MockImageFromHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageFromHTTP) EXPECT() *MockImageFromHTTPMockRecorder {
	return m.recorder
}

// urlToBytes mocks base method.
func (m *MockImageFromHTTP) urlToBytes(url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "urlToBytes", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// urlToBytes indicates an expected call of urlToBytes.
func (mr *MockImageFromHTTPMockRecorder) urlToBytes(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "urlToBytes", reflect.TypeOf((*MockImageFromHTTP)(nil).urlToBytes), url)
}
