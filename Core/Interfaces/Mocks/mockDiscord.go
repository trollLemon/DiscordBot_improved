// Code generated by MockGen. DO NOT EDIT.
// Source: discord.go
//
// Generated by this command:
//
//	mockgen --source=discord.go --destination=./Mocks/mockDiscord.go
//

// Package mock_Interfaces is a generated GoMock package.
package mock_Interfaces

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscordSession is a mock of DiscordSession interface.
type MockDiscordSession struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordSessionMockRecorder
}

// MockDiscordSessionMockRecorder is the mock recorder for MockDiscordSession.
type MockDiscordSessionMockRecorder struct {
	mock *MockDiscordSession
}

// NewMockDiscordSession creates a new mock instance.
func NewMockDiscordSession(ctrl *gomock.Controller) *MockDiscordSession {
	mock := &MockDiscordSession{ctrl: ctrl}
	mock.recorder = &MockDiscordSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordSession) EXPECT() *MockDiscordSessionMockRecorder {
	return m.recorder
}

// ChannelMessageSend mocks base method.
func (m *MockDiscordSession) ChannelMessageSend(channelID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockDiscordSessionMockRecorder) ChannelMessageSend(channelID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockDiscordSession)(nil).ChannelMessageSend), varargs...)
}

// ChannelVoiceJoin mocks base method.
func (m *MockDiscordSession) ChannelVoiceJoin(gID, cID string, mute, deaf bool) (*discordgo.VoiceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelVoiceJoin", gID, cID, mute, deaf)
	ret0, _ := ret[0].(*discordgo.VoiceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelVoiceJoin indicates an expected call of ChannelVoiceJoin.
func (mr *MockDiscordSessionMockRecorder) ChannelVoiceJoin(gID, cID, mute, deaf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelVoiceJoin", reflect.TypeOf((*MockDiscordSession)(nil).ChannelVoiceJoin), gID, cID, mute, deaf)
}

// InteractionRespond mocks base method.
func (m *MockDiscordSession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{interaction, resp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionRespond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockDiscordSessionMockRecorder) InteractionRespond(interaction, resp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, resp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockDiscordSession)(nil).InteractionRespond), varargs...)
}

// InteractionResponseEdit mocks base method.
func (m *MockDiscordSession) InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, newresp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionResponseEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InteractionResponseEdit indicates an expected call of InteractionResponseEdit.
func (mr *MockDiscordSessionMockRecorder) InteractionResponseEdit(interaction, newresp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, newresp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseEdit", reflect.TypeOf((*MockDiscordSession)(nil).InteractionResponseEdit), varargs...)
}

// VoiceState mocks base method.
func (m *MockDiscordSession) VoiceState(guildID, userID string) (*discordgo.VoiceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoiceState", guildID, userID)
	ret0, _ := ret[0].(*discordgo.VoiceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoiceState indicates an expected call of VoiceState.
func (mr *MockDiscordSessionMockRecorder) VoiceState(guildID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoiceState", reflect.TypeOf((*MockDiscordSession)(nil).VoiceState), guildID, userID)
}

// MockDiscordInteraction is a mock of DiscordInteraction interface.
type MockDiscordInteraction struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordInteractionMockRecorder
}

// MockDiscordInteractionMockRecorder is the mock recorder for MockDiscordInteraction.
type MockDiscordInteractionMockRecorder struct {
	mock *MockDiscordInteraction
}

// NewMockDiscordInteraction creates a new mock instance.
func NewMockDiscordInteraction(ctrl *gomock.Controller) *MockDiscordInteraction {
	mock := &MockDiscordInteraction{ctrl: ctrl}
	mock.recorder = &MockDiscordInteractionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordInteraction) EXPECT() *MockDiscordInteractionMockRecorder {
	return m.recorder
}

// ApplicationCommandData mocks base method.
func (m *MockDiscordInteraction) ApplicationCommandData() *discordgo.ApplicationCommandInteractionData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandData")
	ret0, _ := ret[0].(*discordgo.ApplicationCommandInteractionData)
	return ret0
}

// ApplicationCommandData indicates an expected call of ApplicationCommandData.
func (mr *MockDiscordInteractionMockRecorder) ApplicationCommandData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandData", reflect.TypeOf((*MockDiscordInteraction)(nil).ApplicationCommandData))
}

// GetChannel mocks base method.
func (m *MockDiscordInteraction) GetChannel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockDiscordInteractionMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockDiscordInteraction)(nil).GetChannel))
}

// GetInteraction mocks base method.
func (m *MockDiscordInteraction) GetInteraction() *discordgo.Interaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteraction")
	ret0, _ := ret[0].(*discordgo.Interaction)
	return ret0
}

// GetInteraction indicates an expected call of GetInteraction.
func (mr *MockDiscordInteractionMockRecorder) GetInteraction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteraction", reflect.TypeOf((*MockDiscordInteraction)(nil).GetInteraction))
}

// GetInteractionAuthor mocks base method.
func (m *MockDiscordInteraction) GetInteractionAuthor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteractionAuthor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInteractionAuthor indicates an expected call of GetInteractionAuthor.
func (mr *MockDiscordInteractionMockRecorder) GetInteractionAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteractionAuthor", reflect.TypeOf((*MockDiscordInteraction)(nil).GetInteractionAuthor))
}
